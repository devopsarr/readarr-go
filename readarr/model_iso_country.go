/*
Readarr

Readarr API docs

API version: v0.3.18.2411
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// IsoCountry struct for IsoCountry
type IsoCountry struct {
	TwoLetterCode NullableString `json:"twoLetterCode,omitempty"`
	Name NullableString `json:"name,omitempty"`
}

// NewIsoCountry instantiates a new IsoCountry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsoCountry() *IsoCountry {
	this := IsoCountry{}
	return &this
}

// NewIsoCountryWithDefaults instantiates a new IsoCountry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsoCountryWithDefaults() *IsoCountry {
	this := IsoCountry{}
	return &this
}

// GetTwoLetterCode returns the TwoLetterCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IsoCountry) GetTwoLetterCode() string {
	if o == nil || isNil(o.TwoLetterCode.Get()) {
		var ret string
		return ret
	}
	return *o.TwoLetterCode.Get()
}

// GetTwoLetterCodeOk returns a tuple with the TwoLetterCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IsoCountry) GetTwoLetterCodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TwoLetterCode.Get(), o.TwoLetterCode.IsSet()
}

// HasTwoLetterCode returns a boolean if a field has been set.
func (o *IsoCountry) HasTwoLetterCode() bool {
	if o != nil && o.TwoLetterCode.IsSet() {
		return true
	}

	return false
}

// SetTwoLetterCode gets a reference to the given NullableString and assigns it to the TwoLetterCode field.
func (o *IsoCountry) SetTwoLetterCode(v string) {
	o.TwoLetterCode.Set(&v)
}
// SetTwoLetterCodeNil sets the value for TwoLetterCode to be an explicit nil
func (o *IsoCountry) SetTwoLetterCodeNil() {
	o.TwoLetterCode.Set(nil)
}

// UnsetTwoLetterCode ensures that no value is present for TwoLetterCode, not even an explicit nil
func (o *IsoCountry) UnsetTwoLetterCode() {
	o.TwoLetterCode.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IsoCountry) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IsoCountry) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *IsoCountry) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *IsoCountry) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *IsoCountry) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *IsoCountry) UnsetName() {
	o.Name.Unset()
}

func (o IsoCountry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TwoLetterCode.IsSet() {
		toSerialize["twoLetterCode"] = o.TwoLetterCode.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIsoCountry struct {
	value *IsoCountry
	isSet bool
}

func (v NullableIsoCountry) Get() *IsoCountry {
	return v.value
}

func (v *NullableIsoCountry) Set(val *IsoCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableIsoCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableIsoCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsoCountry(val *IsoCountry) *NullableIsoCountry {
	return &NullableIsoCountry{value: val, isSet: true}
}

func (v NullableIsoCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsoCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


