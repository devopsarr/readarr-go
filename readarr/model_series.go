/*
Readarr

Readarr API docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// Series struct for Series
type Series struct {
	Id *int32 `json:"id,omitempty"`
	ForeignSeriesId NullableString `json:"foreignSeriesId,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Numbered *bool `json:"numbered,omitempty"`
	WorkCount *int32 `json:"workCount,omitempty"`
	PrimaryWorkCount *int32 `json:"primaryWorkCount,omitempty"`
	LinkItems *SeriesBookLinkListLazyLoaded `json:"linkItems,omitempty"`
	Books *BookListLazyLoaded `json:"books,omitempty"`
	ForeignAuthorId NullableString `json:"foreignAuthorId,omitempty"`
}

// NewSeries instantiates a new Series object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeries() *Series {
	this := Series{}
	return &this
}

// NewSeriesWithDefaults instantiates a new Series object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesWithDefaults() *Series {
	this := Series{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Series) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Series) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Series) SetId(v int32) {
	o.Id = &v
}

// GetForeignSeriesId returns the ForeignSeriesId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Series) GetForeignSeriesId() string {
	if o == nil || isNil(o.ForeignSeriesId.Get()) {
		var ret string
		return ret
	}
	return *o.ForeignSeriesId.Get()
}

// GetForeignSeriesIdOk returns a tuple with the ForeignSeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Series) GetForeignSeriesIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ForeignSeriesId.Get(), o.ForeignSeriesId.IsSet()
}

// HasForeignSeriesId returns a boolean if a field has been set.
func (o *Series) HasForeignSeriesId() bool {
	if o != nil && o.ForeignSeriesId.IsSet() {
		return true
	}

	return false
}

// SetForeignSeriesId gets a reference to the given NullableString and assigns it to the ForeignSeriesId field.
func (o *Series) SetForeignSeriesId(v string) {
	o.ForeignSeriesId.Set(&v)
}
// SetForeignSeriesIdNil sets the value for ForeignSeriesId to be an explicit nil
func (o *Series) SetForeignSeriesIdNil() {
	o.ForeignSeriesId.Set(nil)
}

// UnsetForeignSeriesId ensures that no value is present for ForeignSeriesId, not even an explicit nil
func (o *Series) UnsetForeignSeriesId() {
	o.ForeignSeriesId.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Series) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Series) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *Series) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *Series) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *Series) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *Series) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Series) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Series) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Series) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Series) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Series) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Series) UnsetDescription() {
	o.Description.Unset()
}

// GetNumbered returns the Numbered field value if set, zero value otherwise.
func (o *Series) GetNumbered() bool {
	if o == nil || isNil(o.Numbered) {
		var ret bool
		return ret
	}
	return *o.Numbered
}

// GetNumberedOk returns a tuple with the Numbered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetNumberedOk() (*bool, bool) {
	if o == nil || isNil(o.Numbered) {
    return nil, false
	}
	return o.Numbered, true
}

// HasNumbered returns a boolean if a field has been set.
func (o *Series) HasNumbered() bool {
	if o != nil && !isNil(o.Numbered) {
		return true
	}

	return false
}

// SetNumbered gets a reference to the given bool and assigns it to the Numbered field.
func (o *Series) SetNumbered(v bool) {
	o.Numbered = &v
}

// GetWorkCount returns the WorkCount field value if set, zero value otherwise.
func (o *Series) GetWorkCount() int32 {
	if o == nil || isNil(o.WorkCount) {
		var ret int32
		return ret
	}
	return *o.WorkCount
}

// GetWorkCountOk returns a tuple with the WorkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetWorkCountOk() (*int32, bool) {
	if o == nil || isNil(o.WorkCount) {
    return nil, false
	}
	return o.WorkCount, true
}

// HasWorkCount returns a boolean if a field has been set.
func (o *Series) HasWorkCount() bool {
	if o != nil && !isNil(o.WorkCount) {
		return true
	}

	return false
}

// SetWorkCount gets a reference to the given int32 and assigns it to the WorkCount field.
func (o *Series) SetWorkCount(v int32) {
	o.WorkCount = &v
}

// GetPrimaryWorkCount returns the PrimaryWorkCount field value if set, zero value otherwise.
func (o *Series) GetPrimaryWorkCount() int32 {
	if o == nil || isNil(o.PrimaryWorkCount) {
		var ret int32
		return ret
	}
	return *o.PrimaryWorkCount
}

// GetPrimaryWorkCountOk returns a tuple with the PrimaryWorkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetPrimaryWorkCountOk() (*int32, bool) {
	if o == nil || isNil(o.PrimaryWorkCount) {
    return nil, false
	}
	return o.PrimaryWorkCount, true
}

// HasPrimaryWorkCount returns a boolean if a field has been set.
func (o *Series) HasPrimaryWorkCount() bool {
	if o != nil && !isNil(o.PrimaryWorkCount) {
		return true
	}

	return false
}

// SetPrimaryWorkCount gets a reference to the given int32 and assigns it to the PrimaryWorkCount field.
func (o *Series) SetPrimaryWorkCount(v int32) {
	o.PrimaryWorkCount = &v
}

// GetLinkItems returns the LinkItems field value if set, zero value otherwise.
func (o *Series) GetLinkItems() SeriesBookLinkListLazyLoaded {
	if o == nil || isNil(o.LinkItems) {
		var ret SeriesBookLinkListLazyLoaded
		return ret
	}
	return *o.LinkItems
}

// GetLinkItemsOk returns a tuple with the LinkItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetLinkItemsOk() (*SeriesBookLinkListLazyLoaded, bool) {
	if o == nil || isNil(o.LinkItems) {
    return nil, false
	}
	return o.LinkItems, true
}

// HasLinkItems returns a boolean if a field has been set.
func (o *Series) HasLinkItems() bool {
	if o != nil && !isNil(o.LinkItems) {
		return true
	}

	return false
}

// SetLinkItems gets a reference to the given SeriesBookLinkListLazyLoaded and assigns it to the LinkItems field.
func (o *Series) SetLinkItems(v SeriesBookLinkListLazyLoaded) {
	o.LinkItems = &v
}

// GetBooks returns the Books field value if set, zero value otherwise.
func (o *Series) GetBooks() BookListLazyLoaded {
	if o == nil || isNil(o.Books) {
		var ret BookListLazyLoaded
		return ret
	}
	return *o.Books
}

// GetBooksOk returns a tuple with the Books field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetBooksOk() (*BookListLazyLoaded, bool) {
	if o == nil || isNil(o.Books) {
    return nil, false
	}
	return o.Books, true
}

// HasBooks returns a boolean if a field has been set.
func (o *Series) HasBooks() bool {
	if o != nil && !isNil(o.Books) {
		return true
	}

	return false
}

// SetBooks gets a reference to the given BookListLazyLoaded and assigns it to the Books field.
func (o *Series) SetBooks(v BookListLazyLoaded) {
	o.Books = &v
}

// GetForeignAuthorId returns the ForeignAuthorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Series) GetForeignAuthorId() string {
	if o == nil || isNil(o.ForeignAuthorId.Get()) {
		var ret string
		return ret
	}
	return *o.ForeignAuthorId.Get()
}

// GetForeignAuthorIdOk returns a tuple with the ForeignAuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Series) GetForeignAuthorIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ForeignAuthorId.Get(), o.ForeignAuthorId.IsSet()
}

// HasForeignAuthorId returns a boolean if a field has been set.
func (o *Series) HasForeignAuthorId() bool {
	if o != nil && o.ForeignAuthorId.IsSet() {
		return true
	}

	return false
}

// SetForeignAuthorId gets a reference to the given NullableString and assigns it to the ForeignAuthorId field.
func (o *Series) SetForeignAuthorId(v string) {
	o.ForeignAuthorId.Set(&v)
}
// SetForeignAuthorIdNil sets the value for ForeignAuthorId to be an explicit nil
func (o *Series) SetForeignAuthorIdNil() {
	o.ForeignAuthorId.Set(nil)
}

// UnsetForeignAuthorId ensures that no value is present for ForeignAuthorId, not even an explicit nil
func (o *Series) UnsetForeignAuthorId() {
	o.ForeignAuthorId.Unset()
}

func (o Series) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ForeignSeriesId.IsSet() {
		toSerialize["foreignSeriesId"] = o.ForeignSeriesId.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !isNil(o.Numbered) {
		toSerialize["numbered"] = o.Numbered
	}
	if !isNil(o.WorkCount) {
		toSerialize["workCount"] = o.WorkCount
	}
	if !isNil(o.PrimaryWorkCount) {
		toSerialize["primaryWorkCount"] = o.PrimaryWorkCount
	}
	if !isNil(o.LinkItems) {
		toSerialize["linkItems"] = o.LinkItems
	}
	if !isNil(o.Books) {
		toSerialize["books"] = o.Books
	}
	if o.ForeignAuthorId.IsSet() {
		toSerialize["foreignAuthorId"] = o.ForeignAuthorId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSeries struct {
	value *Series
	isSet bool
}

func (v NullableSeries) Get() *Series {
	return v.value
}

func (v *NullableSeries) Set(val *Series) {
	v.value = val
	v.isSet = true
}

func (v NullableSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeries(val *Series) *NullableSeries {
	return &NullableSeries{value: val, isSet: true}
}

func (v NullableSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


