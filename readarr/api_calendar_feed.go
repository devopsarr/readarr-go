/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CalendarFeedApiService CalendarFeedApi service
type CalendarFeedApiService service
type ApiGetApiV1CalendarReadarrIcsRequest struct {
	ctx context.Context
	ApiService *CalendarFeedApiService
	pastDays *int32
	futureDays *int32
	tagList *string
	unmonitored *bool
}

func (r ApiGetApiV1CalendarReadarrIcsRequest) PastDays(pastDays int32) ApiGetApiV1CalendarReadarrIcsRequest {
	r.pastDays = &pastDays
	return r
}

func (r ApiGetApiV1CalendarReadarrIcsRequest) FutureDays(futureDays int32) ApiGetApiV1CalendarReadarrIcsRequest {
	r.futureDays = &futureDays
	return r
}

func (r ApiGetApiV1CalendarReadarrIcsRequest) TagList(tagList string) ApiGetApiV1CalendarReadarrIcsRequest {
	r.tagList = &tagList
	return r
}

func (r ApiGetApiV1CalendarReadarrIcsRequest) Unmonitored(unmonitored bool) ApiGetApiV1CalendarReadarrIcsRequest {
	r.unmonitored = &unmonitored
	return r
}

func (r ApiGetApiV1CalendarReadarrIcsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetApiV1CalendarReadarrIcsExecute(r)
}

/*
GetApiV1CalendarReadarrIcs Method for GetApiV1CalendarReadarrIcs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiV1CalendarReadarrIcsRequest
*/
func (a *CalendarFeedApiService) GetApiV1CalendarReadarrIcs(ctx context.Context) ApiGetApiV1CalendarReadarrIcsRequest {
	return ApiGetApiV1CalendarReadarrIcsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CalendarFeedApiService) GetApiV1CalendarReadarrIcsExecute(r ApiGetApiV1CalendarReadarrIcsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarFeedApiService.GetApiV1CalendarReadarrIcs")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/calendar/readarr.ics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pastDays != nil {
		localVarQueryParams.Add("pastDays", parameterToString(*r.pastDays, ""))
	}
	if r.futureDays != nil {
		localVarQueryParams.Add("futureDays", parameterToString(*r.futureDays, ""))
	}
	if r.tagList != nil {
		localVarQueryParams.Add("tagList", parameterToString(*r.tagList, ""))
	}
	if r.unmonitored != nil {
		localVarQueryParams.Add("unmonitored", parameterToString(*r.unmonitored, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
