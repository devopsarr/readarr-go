/*
Readarr

Readarr API docs

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// ICustomFormatSpecification struct for ICustomFormatSpecification
type ICustomFormatSpecification struct {
	Order *int32 `json:"order,omitempty"`
	InfoLink NullableString `json:"infoLink,omitempty"`
	ImplementationName NullableString `json:"implementationName,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Negate *bool `json:"negate,omitempty"`
	Required *bool `json:"required,omitempty"`
}

// NewICustomFormatSpecification instantiates a new ICustomFormatSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewICustomFormatSpecification() *ICustomFormatSpecification {
	this := ICustomFormatSpecification{}
	return &this
}

// NewICustomFormatSpecificationWithDefaults instantiates a new ICustomFormatSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewICustomFormatSpecificationWithDefaults() *ICustomFormatSpecification {
	this := ICustomFormatSpecification{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ICustomFormatSpecification) GetOrder() int32 {
	if o == nil || isNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ICustomFormatSpecification) GetOrderOk() (*int32, bool) {
	if o == nil || isNil(o.Order) {
    return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ICustomFormatSpecification) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *ICustomFormatSpecification) SetOrder(v int32) {
	o.Order = &v
}

// GetInfoLink returns the InfoLink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ICustomFormatSpecification) GetInfoLink() string {
	if o == nil || isNil(o.InfoLink.Get()) {
		var ret string
		return ret
	}
	return *o.InfoLink.Get()
}

// GetInfoLinkOk returns a tuple with the InfoLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ICustomFormatSpecification) GetInfoLinkOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.InfoLink.Get(), o.InfoLink.IsSet()
}

// HasInfoLink returns a boolean if a field has been set.
func (o *ICustomFormatSpecification) HasInfoLink() bool {
	if o != nil && o.InfoLink.IsSet() {
		return true
	}

	return false
}

// SetInfoLink gets a reference to the given NullableString and assigns it to the InfoLink field.
func (o *ICustomFormatSpecification) SetInfoLink(v string) {
	o.InfoLink.Set(&v)
}
// SetInfoLinkNil sets the value for InfoLink to be an explicit nil
func (o *ICustomFormatSpecification) SetInfoLinkNil() {
	o.InfoLink.Set(nil)
}

// UnsetInfoLink ensures that no value is present for InfoLink, not even an explicit nil
func (o *ICustomFormatSpecification) UnsetInfoLink() {
	o.InfoLink.Unset()
}

// GetImplementationName returns the ImplementationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ICustomFormatSpecification) GetImplementationName() string {
	if o == nil || isNil(o.ImplementationName.Get()) {
		var ret string
		return ret
	}
	return *o.ImplementationName.Get()
}

// GetImplementationNameOk returns a tuple with the ImplementationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ICustomFormatSpecification) GetImplementationNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ImplementationName.Get(), o.ImplementationName.IsSet()
}

// HasImplementationName returns a boolean if a field has been set.
func (o *ICustomFormatSpecification) HasImplementationName() bool {
	if o != nil && o.ImplementationName.IsSet() {
		return true
	}

	return false
}

// SetImplementationName gets a reference to the given NullableString and assigns it to the ImplementationName field.
func (o *ICustomFormatSpecification) SetImplementationName(v string) {
	o.ImplementationName.Set(&v)
}
// SetImplementationNameNil sets the value for ImplementationName to be an explicit nil
func (o *ICustomFormatSpecification) SetImplementationNameNil() {
	o.ImplementationName.Set(nil)
}

// UnsetImplementationName ensures that no value is present for ImplementationName, not even an explicit nil
func (o *ICustomFormatSpecification) UnsetImplementationName() {
	o.ImplementationName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ICustomFormatSpecification) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ICustomFormatSpecification) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ICustomFormatSpecification) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ICustomFormatSpecification) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ICustomFormatSpecification) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ICustomFormatSpecification) UnsetName() {
	o.Name.Unset()
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *ICustomFormatSpecification) GetNegate() bool {
	if o == nil || isNil(o.Negate) {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ICustomFormatSpecification) GetNegateOk() (*bool, bool) {
	if o == nil || isNil(o.Negate) {
    return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *ICustomFormatSpecification) HasNegate() bool {
	if o != nil && !isNil(o.Negate) {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *ICustomFormatSpecification) SetNegate(v bool) {
	o.Negate = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ICustomFormatSpecification) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ICustomFormatSpecification) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
    return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ICustomFormatSpecification) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ICustomFormatSpecification) SetRequired(v bool) {
	o.Required = &v
}

func (o ICustomFormatSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if o.InfoLink.IsSet() {
		toSerialize["infoLink"] = o.InfoLink.Get()
	}
	if o.ImplementationName.IsSet() {
		toSerialize["implementationName"] = o.ImplementationName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !isNil(o.Negate) {
		toSerialize["negate"] = o.Negate
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return json.Marshal(toSerialize)
}

type NullableICustomFormatSpecification struct {
	value *ICustomFormatSpecification
	isSet bool
}

func (v NullableICustomFormatSpecification) Get() *ICustomFormatSpecification {
	return v.value
}

func (v *NullableICustomFormatSpecification) Set(val *ICustomFormatSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableICustomFormatSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableICustomFormatSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableICustomFormatSpecification(val *ICustomFormatSpecification) *NullableICustomFormatSpecification {
	return &NullableICustomFormatSpecification{value: val, isSet: true}
}

func (v NullableICustomFormatSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableICustomFormatSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


