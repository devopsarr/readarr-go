/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
	"time"
)

// BlacklistResource struct for BlacklistResource
type BlacklistResource struct {
	Id *int32 `json:"id,omitempty"`
	AuthorId *int32 `json:"authorId,omitempty"`
	BookIds []*int32 `json:"bookIds,omitempty"`
	SourceTitle NullableString `json:"sourceTitle,omitempty"`
	Quality *QualityModel `json:"quality,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Protocol *DownloadProtocol `json:"protocol,omitempty"`
	Indexer NullableString `json:"indexer,omitempty"`
	Message NullableString `json:"message,omitempty"`
	Author *AuthorResource `json:"author,omitempty"`
}

// NewBlacklistResource instantiates a new BlacklistResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlacklistResource() *BlacklistResource {
	this := BlacklistResource{}
	return &this
}

// NewBlacklistResourceWithDefaults instantiates a new BlacklistResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlacklistResourceWithDefaults() *BlacklistResource {
	this := BlacklistResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlacklistResource) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlacklistResource) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlacklistResource) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BlacklistResource) SetId(v int32) {
	o.Id = &v
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *BlacklistResource) GetAuthorId() int32 {
	if o == nil || isNil(o.AuthorId) {
		var ret int32
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlacklistResource) GetAuthorIdOk() (*int32, bool) {
	if o == nil || isNil(o.AuthorId) {
    return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *BlacklistResource) HasAuthorId() bool {
	if o != nil && !isNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given int32 and assigns it to the AuthorId field.
func (o *BlacklistResource) SetAuthorId(v int32) {
	o.AuthorId = &v
}

// GetBookIds returns the BookIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlacklistResource) GetBookIds() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.BookIds
}

// GetBookIdsOk returns a tuple with the BookIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlacklistResource) GetBookIdsOk() ([]*int32, bool) {
	if o == nil || isNil(o.BookIds) {
    return nil, false
	}
	return o.BookIds, true
}

// HasBookIds returns a boolean if a field has been set.
func (o *BlacklistResource) HasBookIds() bool {
	if o != nil && isNil(o.BookIds) {
		return true
	}

	return false
}

// SetBookIds gets a reference to the given []int32 and assigns it to the BookIds field.
func (o *BlacklistResource) SetBookIds(v []*int32) {
	o.BookIds = v
}

// GetSourceTitle returns the SourceTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlacklistResource) GetSourceTitle() string {
	if o == nil || isNil(o.SourceTitle.Get()) {
		var ret string
		return ret
	}
	return *o.SourceTitle.Get()
}

// GetSourceTitleOk returns a tuple with the SourceTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlacklistResource) GetSourceTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SourceTitle.Get(), o.SourceTitle.IsSet()
}

// HasSourceTitle returns a boolean if a field has been set.
func (o *BlacklistResource) HasSourceTitle() bool {
	if o != nil && o.SourceTitle.IsSet() {
		return true
	}

	return false
}

// SetSourceTitle gets a reference to the given NullableString and assigns it to the SourceTitle field.
func (o *BlacklistResource) SetSourceTitle(v string) {
	o.SourceTitle.Set(&v)
}
// SetSourceTitleNil sets the value for SourceTitle to be an explicit nil
func (o *BlacklistResource) SetSourceTitleNil() {
	o.SourceTitle.Set(nil)
}

// UnsetSourceTitle ensures that no value is present for SourceTitle, not even an explicit nil
func (o *BlacklistResource) UnsetSourceTitle() {
	o.SourceTitle.Unset()
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *BlacklistResource) GetQuality() QualityModel {
	if o == nil || isNil(o.Quality) {
		var ret QualityModel
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlacklistResource) GetQualityOk() (*QualityModel, bool) {
	if o == nil || isNil(o.Quality) {
    return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *BlacklistResource) HasQuality() bool {
	if o != nil && !isNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given QualityModel and assigns it to the Quality field.
func (o *BlacklistResource) SetQuality(v QualityModel) {
	o.Quality = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BlacklistResource) GetDate() time.Time {
	if o == nil || isNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlacklistResource) GetDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BlacklistResource) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *BlacklistResource) SetDate(v time.Time) {
	o.Date = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *BlacklistResource) GetProtocol() DownloadProtocol {
	if o == nil || isNil(o.Protocol) {
		var ret DownloadProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlacklistResource) GetProtocolOk() (*DownloadProtocol, bool) {
	if o == nil || isNil(o.Protocol) {
    return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *BlacklistResource) HasProtocol() bool {
	if o != nil && !isNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given DownloadProtocol and assigns it to the Protocol field.
func (o *BlacklistResource) SetProtocol(v DownloadProtocol) {
	o.Protocol = &v
}

// GetIndexer returns the Indexer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlacklistResource) GetIndexer() string {
	if o == nil || isNil(o.Indexer.Get()) {
		var ret string
		return ret
	}
	return *o.Indexer.Get()
}

// GetIndexerOk returns a tuple with the Indexer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlacklistResource) GetIndexerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Indexer.Get(), o.Indexer.IsSet()
}

// HasIndexer returns a boolean if a field has been set.
func (o *BlacklistResource) HasIndexer() bool {
	if o != nil && o.Indexer.IsSet() {
		return true
	}

	return false
}

// SetIndexer gets a reference to the given NullableString and assigns it to the Indexer field.
func (o *BlacklistResource) SetIndexer(v string) {
	o.Indexer.Set(&v)
}
// SetIndexerNil sets the value for Indexer to be an explicit nil
func (o *BlacklistResource) SetIndexerNil() {
	o.Indexer.Set(nil)
}

// UnsetIndexer ensures that no value is present for Indexer, not even an explicit nil
func (o *BlacklistResource) UnsetIndexer() {
	o.Indexer.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlacklistResource) GetMessage() string {
	if o == nil || isNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlacklistResource) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *BlacklistResource) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *BlacklistResource) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *BlacklistResource) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *BlacklistResource) UnsetMessage() {
	o.Message.Unset()
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *BlacklistResource) GetAuthor() AuthorResource {
	if o == nil || isNil(o.Author) {
		var ret AuthorResource
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlacklistResource) GetAuthorOk() (*AuthorResource, bool) {
	if o == nil || isNil(o.Author) {
    return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *BlacklistResource) HasAuthor() bool {
	if o != nil && !isNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given AuthorResource and assigns it to the Author field.
func (o *BlacklistResource) SetAuthor(v AuthorResource) {
	o.Author = &v
}

func (o BlacklistResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.AuthorId) {
		toSerialize["authorId"] = o.AuthorId
	}
	if o.BookIds != nil {
		toSerialize["bookIds"] = o.BookIds
	}
	if o.SourceTitle.IsSet() {
		toSerialize["sourceTitle"] = o.SourceTitle.Get()
	}
	if !isNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if o.Indexer.IsSet() {
		toSerialize["indexer"] = o.Indexer.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if !isNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	return json.Marshal(toSerialize)
}

type NullableBlacklistResource struct {
	value *BlacklistResource
	isSet bool
}

func (v NullableBlacklistResource) Get() *BlacklistResource {
	return v.value
}

func (v *NullableBlacklistResource) Set(val *BlacklistResource) {
	v.value = val
	v.isSet = true
}

func (v NullableBlacklistResource) IsSet() bool {
	return v.isSet
}

func (v *NullableBlacklistResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlacklistResource(val *BlacklistResource) *NullableBlacklistResource {
	return &NullableBlacklistResource{value: val, isSet: true}
}

func (v NullableBlacklistResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlacklistResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


