/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ManualImportAPIService ManualImportAPI service
type ManualImportAPIService service
type ApiListManualImportRequest struct {
	ctx context.Context
	ApiService *ManualImportAPIService
	folder *string
	downloadId *string
	authorId *int32
	filterExistingFiles *bool
	replaceExistingFiles *bool
}

func (r ApiListManualImportRequest) Folder(folder string) ApiListManualImportRequest {
	r.folder = &folder
	return r
}

func (r ApiListManualImportRequest) DownloadId(downloadId string) ApiListManualImportRequest {
	r.downloadId = &downloadId
	return r
}

func (r ApiListManualImportRequest) AuthorId(authorId int32) ApiListManualImportRequest {
	r.authorId = &authorId
	return r
}

func (r ApiListManualImportRequest) FilterExistingFiles(filterExistingFiles bool) ApiListManualImportRequest {
	r.filterExistingFiles = &filterExistingFiles
	return r
}

func (r ApiListManualImportRequest) ReplaceExistingFiles(replaceExistingFiles bool) ApiListManualImportRequest {
	r.replaceExistingFiles = &replaceExistingFiles
	return r
}

func (r ApiListManualImportRequest) Execute() ([]*ManualImportResource, *http.Response, error) {
	return r.ApiService.ListManualImportExecute(r)
}

/*
ListManualImport Method for ListManualImport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListManualImportRequest
*/
func (a *ManualImportAPIService) ListManualImport(ctx context.Context) ApiListManualImportRequest {
	return ApiListManualImportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ManualImportResource
func (a *ManualImportAPIService) ListManualImportExecute(r ApiListManualImportRequest) ([]*ManualImportResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []*ManualImportResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManualImportAPIService.ListManualImport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/manualimport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.folder != nil {
		localVarQueryParams.Add("folder", parameterToString(*r.folder, ""))
	}
	if r.downloadId != nil {
		localVarQueryParams.Add("downloadId", parameterToString(*r.downloadId, ""))
	}
	if r.authorId != nil {
		localVarQueryParams.Add("authorId", parameterToString(*r.authorId, ""))
	}
	if r.filterExistingFiles != nil {
		localVarQueryParams.Add("filterExistingFiles", parameterToString(*r.filterExistingFiles, ""))
	}
	if r.replaceExistingFiles != nil {
		localVarQueryParams.Add("replaceExistingFiles", parameterToString(*r.replaceExistingFiles, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiPutManualImportRequest struct {
	ctx context.Context
	ApiService *ManualImportAPIService
	manualImportResource *[]ManualImportResource
}

func (r ApiPutManualImportRequest) ManualImportResource(manualImportResource []ManualImportResource) ApiPutManualImportRequest {
	r.manualImportResource = &manualImportResource
	return r
}

func (r ApiPutManualImportRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutManualImportExecute(r)
}

/*
PutManualImport Method for PutManualImport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPutManualImportRequest
*/
func (a *ManualImportAPIService) PutManualImport(ctx context.Context) ApiPutManualImportRequest {
	return ApiPutManualImportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ManualImportAPIService) PutManualImportExecute(r ApiPutManualImportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManualImportAPIService.PutManualImport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/manualimport"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manualImportResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
