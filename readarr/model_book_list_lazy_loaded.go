/*
Readarr

Readarr API docs

API version: v0.3.18.2411
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// checks if the BookListLazyLoaded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookListLazyLoaded{}

// BookListLazyLoaded struct for BookListLazyLoaded
type BookListLazyLoaded struct {
	Value []Book `json:"value,omitempty"`
	IsLoaded *bool `json:"isLoaded,omitempty"`
}

// NewBookListLazyLoaded instantiates a new BookListLazyLoaded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookListLazyLoaded() *BookListLazyLoaded {
	this := BookListLazyLoaded{}
	return &this
}

// NewBookListLazyLoadedWithDefaults instantiates a new BookListLazyLoaded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookListLazyLoadedWithDefaults() *BookListLazyLoaded {
	this := BookListLazyLoaded{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookListLazyLoaded) GetValue() []Book {
	if o == nil {
		var ret []Book
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookListLazyLoaded) GetValueOk() ([]Book, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BookListLazyLoaded) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given []Book and assigns it to the Value field.
func (o *BookListLazyLoaded) SetValue(v []Book) {
	o.Value = v
}

// GetIsLoaded returns the IsLoaded field value if set, zero value otherwise.
func (o *BookListLazyLoaded) GetIsLoaded() bool {
	if o == nil || IsNil(o.IsLoaded) {
		var ret bool
		return ret
	}
	return *o.IsLoaded
}

// GetIsLoadedOk returns a tuple with the IsLoaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookListLazyLoaded) GetIsLoadedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLoaded) {
		return nil, false
	}
	return o.IsLoaded, true
}

// HasIsLoaded returns a boolean if a field has been set.
func (o *BookListLazyLoaded) HasIsLoaded() bool {
	if o != nil && !IsNil(o.IsLoaded) {
		return true
	}

	return false
}

// SetIsLoaded gets a reference to the given bool and assigns it to the IsLoaded field.
func (o *BookListLazyLoaded) SetIsLoaded(v bool) {
	o.IsLoaded = &v
}

func (o BookListLazyLoaded) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookListLazyLoaded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.IsLoaded) {
		toSerialize["isLoaded"] = o.IsLoaded
	}
	return toSerialize, nil
}

type NullableBookListLazyLoaded struct {
	value *BookListLazyLoaded
	isSet bool
}

func (v NullableBookListLazyLoaded) Get() *BookListLazyLoaded {
	return v.value
}

func (v *NullableBookListLazyLoaded) Set(val *BookListLazyLoaded) {
	v.value = val
	v.isSet = true
}

func (v NullableBookListLazyLoaded) IsSet() bool {
	return v.isSet
}

func (v *NullableBookListLazyLoaded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookListLazyLoaded(val *BookListLazyLoaded) *NullableBookListLazyLoaded {
	return &NullableBookListLazyLoaded{value: val, isSet: true}
}

func (v NullableBookListLazyLoaded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookListLazyLoaded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


