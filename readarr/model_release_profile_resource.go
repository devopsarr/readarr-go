/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// ReleaseProfileResource struct for ReleaseProfileResource
type ReleaseProfileResource struct {
	Id *int32 `json:"id,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Required NullableString `json:"required,omitempty"`
	Ignored NullableString `json:"ignored,omitempty"`
	Preferred []*StringInt32KeyValuePair `json:"preferred,omitempty"`
	IncludePreferredWhenRenaming *bool `json:"includePreferredWhenRenaming,omitempty"`
	IndexerId *int32 `json:"indexerId,omitempty"`
	Tags []*int32 `json:"tags,omitempty"`
}

// NewReleaseProfileResource instantiates a new ReleaseProfileResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseProfileResource() *ReleaseProfileResource {
	this := ReleaseProfileResource{}
	return &this
}

// NewReleaseProfileResourceWithDefaults instantiates a new ReleaseProfileResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseProfileResourceWithDefaults() *ReleaseProfileResource {
	this := ReleaseProfileResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReleaseProfileResource) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseProfileResource) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReleaseProfileResource) SetId(v int32) {
	o.Id = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ReleaseProfileResource) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseProfileResource) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ReleaseProfileResource) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseProfileResource) GetRequired() string {
	if o == nil || isNil(o.Required.Get()) {
		var ret string
		return ret
	}
	return *o.Required.Get()
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseProfileResource) GetRequiredOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Required.Get(), o.Required.IsSet()
}

// HasRequired returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasRequired() bool {
	if o != nil && o.Required.IsSet() {
		return true
	}

	return false
}

// SetRequired gets a reference to the given NullableString and assigns it to the Required field.
func (o *ReleaseProfileResource) SetRequired(v string) {
	o.Required.Set(&v)
}
// SetRequiredNil sets the value for Required to be an explicit nil
func (o *ReleaseProfileResource) SetRequiredNil() {
	o.Required.Set(nil)
}

// UnsetRequired ensures that no value is present for Required, not even an explicit nil
func (o *ReleaseProfileResource) UnsetRequired() {
	o.Required.Unset()
}

// GetIgnored returns the Ignored field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseProfileResource) GetIgnored() string {
	if o == nil || isNil(o.Ignored.Get()) {
		var ret string
		return ret
	}
	return *o.Ignored.Get()
}

// GetIgnoredOk returns a tuple with the Ignored field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseProfileResource) GetIgnoredOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Ignored.Get(), o.Ignored.IsSet()
}

// HasIgnored returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasIgnored() bool {
	if o != nil && o.Ignored.IsSet() {
		return true
	}

	return false
}

// SetIgnored gets a reference to the given NullableString and assigns it to the Ignored field.
func (o *ReleaseProfileResource) SetIgnored(v string) {
	o.Ignored.Set(&v)
}
// SetIgnoredNil sets the value for Ignored to be an explicit nil
func (o *ReleaseProfileResource) SetIgnoredNil() {
	o.Ignored.Set(nil)
}

// UnsetIgnored ensures that no value is present for Ignored, not even an explicit nil
func (o *ReleaseProfileResource) UnsetIgnored() {
	o.Ignored.Unset()
}

// GetPreferred returns the Preferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseProfileResource) GetPreferred() []*StringInt32KeyValuePair {
	if o == nil {
		var ret []*StringInt32KeyValuePair
		return ret
	}
	return o.Preferred
}

// GetPreferredOk returns a tuple with the Preferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseProfileResource) GetPreferredOk() ([]*StringInt32KeyValuePair, bool) {
	if o == nil || isNil(o.Preferred) {
    return nil, false
	}
	return o.Preferred, true
}

// HasPreferred returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasPreferred() bool {
	if o != nil && isNil(o.Preferred) {
		return true
	}

	return false
}

// SetPreferred gets a reference to the given []StringInt32KeyValuePair and assigns it to the Preferred field.
func (o *ReleaseProfileResource) SetPreferred(v []*StringInt32KeyValuePair) {
	o.Preferred = v
}

// GetIncludePreferredWhenRenaming returns the IncludePreferredWhenRenaming field value if set, zero value otherwise.
func (o *ReleaseProfileResource) GetIncludePreferredWhenRenaming() bool {
	if o == nil || isNil(o.IncludePreferredWhenRenaming) {
		var ret bool
		return ret
	}
	return *o.IncludePreferredWhenRenaming
}

// GetIncludePreferredWhenRenamingOk returns a tuple with the IncludePreferredWhenRenaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseProfileResource) GetIncludePreferredWhenRenamingOk() (*bool, bool) {
	if o == nil || isNil(o.IncludePreferredWhenRenaming) {
    return nil, false
	}
	return o.IncludePreferredWhenRenaming, true
}

// HasIncludePreferredWhenRenaming returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasIncludePreferredWhenRenaming() bool {
	if o != nil && !isNil(o.IncludePreferredWhenRenaming) {
		return true
	}

	return false
}

// SetIncludePreferredWhenRenaming gets a reference to the given bool and assigns it to the IncludePreferredWhenRenaming field.
func (o *ReleaseProfileResource) SetIncludePreferredWhenRenaming(v bool) {
	o.IncludePreferredWhenRenaming = &v
}

// GetIndexerId returns the IndexerId field value if set, zero value otherwise.
func (o *ReleaseProfileResource) GetIndexerId() int32 {
	if o == nil || isNil(o.IndexerId) {
		var ret int32
		return ret
	}
	return *o.IndexerId
}

// GetIndexerIdOk returns a tuple with the IndexerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseProfileResource) GetIndexerIdOk() (*int32, bool) {
	if o == nil || isNil(o.IndexerId) {
    return nil, false
	}
	return o.IndexerId, true
}

// HasIndexerId returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasIndexerId() bool {
	if o != nil && !isNil(o.IndexerId) {
		return true
	}

	return false
}

// SetIndexerId gets a reference to the given int32 and assigns it to the IndexerId field.
func (o *ReleaseProfileResource) SetIndexerId(v int32) {
	o.IndexerId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseProfileResource) GetTags() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseProfileResource) GetTagsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ReleaseProfileResource) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *ReleaseProfileResource) SetTags(v []*int32) {
	o.Tags = v
}

func (o ReleaseProfileResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Required.IsSet() {
		toSerialize["required"] = o.Required.Get()
	}
	if o.Ignored.IsSet() {
		toSerialize["ignored"] = o.Ignored.Get()
	}
	if o.Preferred != nil {
		toSerialize["preferred"] = o.Preferred
	}
	if !isNil(o.IncludePreferredWhenRenaming) {
		toSerialize["includePreferredWhenRenaming"] = o.IncludePreferredWhenRenaming
	}
	if !isNil(o.IndexerId) {
		toSerialize["indexerId"] = o.IndexerId
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableReleaseProfileResource struct {
	value *ReleaseProfileResource
	isSet bool
}

func (v NullableReleaseProfileResource) Get() *ReleaseProfileResource {
	return v.value
}

func (v *NullableReleaseProfileResource) Set(val *ReleaseProfileResource) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseProfileResource) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseProfileResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseProfileResource(val *ReleaseProfileResource) *NullableReleaseProfileResource {
	return &NullableReleaseProfileResource{value: val, isSet: true}
}

func (v NullableReleaseProfileResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseProfileResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


