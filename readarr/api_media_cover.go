/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MediaCoverApiService MediaCoverApi service
type MediaCoverApiService service
type ApiGetApiV1MediacoverAuthorauthoridByFilenameRequest struct {
	ctx context.Context
	ApiService *MediaCoverApiService
	authorId int32
	filename string
}

func (r ApiGetApiV1MediacoverAuthorauthoridByFilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetApiV1MediacoverAuthorauthoridByFilenameExecute(r)
}

/*
GetApiV1MediacoverAuthorauthoridByFilename Method for GetApiV1MediacoverAuthorauthoridByFilename

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param authorId
 @param filename
 @return ApiGetApiV1MediacoverAuthorauthoridByFilenameRequest
*/
func (a *MediaCoverApiService) GetApiV1MediacoverAuthorauthoridByFilename(ctx context.Context, authorId int32, filename string) ApiGetApiV1MediacoverAuthorauthoridByFilenameRequest {
	return ApiGetApiV1MediacoverAuthorauthoridByFilenameRequest{
		ApiService: a,
		ctx: ctx,
		authorId: authorId,
		filename: filename,
	}
}

// Execute executes the request
func (a *MediaCoverApiService) GetApiV1MediacoverAuthorauthoridByFilenameExecute(r ApiGetApiV1MediacoverAuthorauthoridByFilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaCoverApiService.GetApiV1MediacoverAuthorauthoridByFilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/mediacover/author/{authorId}/{filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"authorId"+"}", url.PathEscape(parameterToString(r.authorId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"filename"+"}", url.PathEscape(parameterToString(r.filename, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
type ApiGetApiV1MediacoverBookbookidByFilenameRequest struct {
	ctx context.Context
	ApiService *MediaCoverApiService
	bookId int32
	filename string
}

func (r ApiGetApiV1MediacoverBookbookidByFilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetApiV1MediacoverBookbookidByFilenameExecute(r)
}

/*
GetApiV1MediacoverBookbookidByFilename Method for GetApiV1MediacoverBookbookidByFilename

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bookId
 @param filename
 @return ApiGetApiV1MediacoverBookbookidByFilenameRequest
*/
func (a *MediaCoverApiService) GetApiV1MediacoverBookbookidByFilename(ctx context.Context, bookId int32, filename string) ApiGetApiV1MediacoverBookbookidByFilenameRequest {
	return ApiGetApiV1MediacoverBookbookidByFilenameRequest{
		ApiService: a,
		ctx: ctx,
		bookId: bookId,
		filename: filename,
	}
}

// Execute executes the request
func (a *MediaCoverApiService) GetApiV1MediacoverBookbookidByFilenameExecute(r ApiGetApiV1MediacoverBookbookidByFilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaCoverApiService.GetApiV1MediacoverBookbookidByFilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/mediacover/book/{bookId}/{filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"bookId"+"}", url.PathEscape(parameterToString(r.bookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"filename"+"}", url.PathEscape(parameterToString(r.filename, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
