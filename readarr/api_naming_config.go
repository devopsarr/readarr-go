/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NamingConfigApiService NamingConfigApi service
type NamingConfigApiService service
type ApiGetApiV1ConfigNamingRequest struct {
	ctx context.Context
	ApiService *NamingConfigApiService
}

func (r ApiGetApiV1ConfigNamingRequest) Execute() (*NamingConfigResource, *http.Response, error) {
	return r.ApiService.GetApiV1ConfigNamingExecute(r)
}

/*
GetApiV1ConfigNaming Method for GetApiV1ConfigNaming

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiV1ConfigNamingRequest
*/
func (a *NamingConfigApiService) GetApiV1ConfigNaming(ctx context.Context) ApiGetApiV1ConfigNamingRequest {
	return ApiGetApiV1ConfigNamingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NamingConfigResource
func (a *NamingConfigApiService) GetApiV1ConfigNamingExecute(r ApiGetApiV1ConfigNamingRequest) (*NamingConfigResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NamingConfigResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamingConfigApiService.GetApiV1ConfigNaming")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/config/naming"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiGetApiV1ConfigNamingByIdRequest struct {
	ctx context.Context
	ApiService *NamingConfigApiService
	id int32
}

func (r ApiGetApiV1ConfigNamingByIdRequest) Execute() (*NamingConfigResource, *http.Response, error) {
	return r.ApiService.GetApiV1ConfigNamingByIdExecute(r)
}

/*
GetApiV1ConfigNamingById Method for GetApiV1ConfigNamingById

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetApiV1ConfigNamingByIdRequest
*/
func (a *NamingConfigApiService) GetApiV1ConfigNamingById(ctx context.Context, id int32) ApiGetApiV1ConfigNamingByIdRequest {
	return ApiGetApiV1ConfigNamingByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NamingConfigResource
func (a *NamingConfigApiService) GetApiV1ConfigNamingByIdExecute(r ApiGetApiV1ConfigNamingByIdRequest) (*NamingConfigResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NamingConfigResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamingConfigApiService.GetApiV1ConfigNamingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/config/naming/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiGetApiV1ConfigNamingExamplesRequest struct {
	ctx context.Context
	ApiService *NamingConfigApiService
	renameBooks *bool
	replaceIllegalCharacters *bool
	standardBookFormat *string
	authorFolderFormat *string
	includeAuthorName *bool
	includeBookTitle *bool
	includeQuality *bool
	replaceSpaces *bool
	separator *string
	numberStyle *string
	id *int32
	resourceName *string
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) RenameBooks(renameBooks bool) ApiGetApiV1ConfigNamingExamplesRequest {
	r.renameBooks = &renameBooks
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) ReplaceIllegalCharacters(replaceIllegalCharacters bool) ApiGetApiV1ConfigNamingExamplesRequest {
	r.replaceIllegalCharacters = &replaceIllegalCharacters
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) StandardBookFormat(standardBookFormat string) ApiGetApiV1ConfigNamingExamplesRequest {
	r.standardBookFormat = &standardBookFormat
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) AuthorFolderFormat(authorFolderFormat string) ApiGetApiV1ConfigNamingExamplesRequest {
	r.authorFolderFormat = &authorFolderFormat
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) IncludeAuthorName(includeAuthorName bool) ApiGetApiV1ConfigNamingExamplesRequest {
	r.includeAuthorName = &includeAuthorName
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) IncludeBookTitle(includeBookTitle bool) ApiGetApiV1ConfigNamingExamplesRequest {
	r.includeBookTitle = &includeBookTitle
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) IncludeQuality(includeQuality bool) ApiGetApiV1ConfigNamingExamplesRequest {
	r.includeQuality = &includeQuality
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) ReplaceSpaces(replaceSpaces bool) ApiGetApiV1ConfigNamingExamplesRequest {
	r.replaceSpaces = &replaceSpaces
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) Separator(separator string) ApiGetApiV1ConfigNamingExamplesRequest {
	r.separator = &separator
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) NumberStyle(numberStyle string) ApiGetApiV1ConfigNamingExamplesRequest {
	r.numberStyle = &numberStyle
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) Id(id int32) ApiGetApiV1ConfigNamingExamplesRequest {
	r.id = &id
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) ResourceName(resourceName string) ApiGetApiV1ConfigNamingExamplesRequest {
	r.resourceName = &resourceName
	return r
}

func (r ApiGetApiV1ConfigNamingExamplesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetApiV1ConfigNamingExamplesExecute(r)
}

/*
GetApiV1ConfigNamingExamples Method for GetApiV1ConfigNamingExamples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiV1ConfigNamingExamplesRequest
*/
func (a *NamingConfigApiService) GetApiV1ConfigNamingExamples(ctx context.Context) ApiGetApiV1ConfigNamingExamplesRequest {
	return ApiGetApiV1ConfigNamingExamplesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *NamingConfigApiService) GetApiV1ConfigNamingExamplesExecute(r ApiGetApiV1ConfigNamingExamplesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamingConfigApiService.GetApiV1ConfigNamingExamples")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/config/naming/examples"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.renameBooks != nil {
		localVarQueryParams.Add("RenameBooks", parameterToString(*r.renameBooks, ""))
	}
	if r.replaceIllegalCharacters != nil {
		localVarQueryParams.Add("ReplaceIllegalCharacters", parameterToString(*r.replaceIllegalCharacters, ""))
	}
	if r.standardBookFormat != nil {
		localVarQueryParams.Add("StandardBookFormat", parameterToString(*r.standardBookFormat, ""))
	}
	if r.authorFolderFormat != nil {
		localVarQueryParams.Add("AuthorFolderFormat", parameterToString(*r.authorFolderFormat, ""))
	}
	if r.includeAuthorName != nil {
		localVarQueryParams.Add("IncludeAuthorName", parameterToString(*r.includeAuthorName, ""))
	}
	if r.includeBookTitle != nil {
		localVarQueryParams.Add("IncludeBookTitle", parameterToString(*r.includeBookTitle, ""))
	}
	if r.includeQuality != nil {
		localVarQueryParams.Add("IncludeQuality", parameterToString(*r.includeQuality, ""))
	}
	if r.replaceSpaces != nil {
		localVarQueryParams.Add("ReplaceSpaces", parameterToString(*r.replaceSpaces, ""))
	}
	if r.separator != nil {
		localVarQueryParams.Add("Separator", parameterToString(*r.separator, ""))
	}
	if r.numberStyle != nil {
		localVarQueryParams.Add("NumberStyle", parameterToString(*r.numberStyle, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("Id", parameterToString(*r.id, ""))
	}
	if r.resourceName != nil {
		localVarQueryParams.Add("ResourceName", parameterToString(*r.resourceName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
type ApiUpdateApiV1ConfigNamingRequest struct {
	ctx context.Context
	ApiService *NamingConfigApiService
	id string
	namingConfigResource *NamingConfigResource
}

func (r ApiUpdateApiV1ConfigNamingRequest) NamingConfigResource(namingConfigResource NamingConfigResource) ApiUpdateApiV1ConfigNamingRequest {
	r.namingConfigResource = &namingConfigResource
	return r
}

func (r ApiUpdateApiV1ConfigNamingRequest) Execute() (*NamingConfigResource, *http.Response, error) {
	return r.ApiService.UpdateApiV1ConfigNamingExecute(r)
}

/*
UpdateApiV1ConfigNaming Method for UpdateApiV1ConfigNaming

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiUpdateApiV1ConfigNamingRequest
*/
func (a *NamingConfigApiService) UpdateApiV1ConfigNaming(ctx context.Context, id string) ApiUpdateApiV1ConfigNamingRequest {
	return ApiUpdateApiV1ConfigNamingRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NamingConfigResource
func (a *NamingConfigApiService) UpdateApiV1ConfigNamingExecute(r ApiUpdateApiV1ConfigNamingRequest) (*NamingConfigResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NamingConfigResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NamingConfigApiService.UpdateApiV1ConfigNaming")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/config/naming/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.namingConfigResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
