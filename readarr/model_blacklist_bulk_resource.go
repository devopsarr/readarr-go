/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// BlacklistBulkResource struct for BlacklistBulkResource
type BlacklistBulkResource struct {
	Ids []*int32 `json:"ids,omitempty"`
}

// NewBlacklistBulkResource instantiates a new BlacklistBulkResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlacklistBulkResource() *BlacklistBulkResource {
	this := BlacklistBulkResource{}
	return &this
}

// NewBlacklistBulkResourceWithDefaults instantiates a new BlacklistBulkResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlacklistBulkResourceWithDefaults() *BlacklistBulkResource {
	this := BlacklistBulkResource{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlacklistBulkResource) GetIds() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlacklistBulkResource) GetIdsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Ids) {
    return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *BlacklistBulkResource) HasIds() bool {
	if o != nil && isNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *BlacklistBulkResource) SetIds(v []*int32) {
	o.Ids = v
}

func (o BlacklistBulkResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	return json.Marshal(toSerialize)
}

type NullableBlacklistBulkResource struct {
	value *BlacklistBulkResource
	isSet bool
}

func (v NullableBlacklistBulkResource) Get() *BlacklistBulkResource {
	return v.value
}

func (v *NullableBlacklistBulkResource) Set(val *BlacklistBulkResource) {
	v.value = val
	v.isSet = true
}

func (v NullableBlacklistBulkResource) IsSet() bool {
	return v.isSet
}

func (v *NullableBlacklistBulkResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlacklistBulkResource(val *BlacklistBulkResource) *NullableBlacklistBulkResource {
	return &NullableBlacklistBulkResource{value: val, isSet: true}
}

func (v NullableBlacklistBulkResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlacklistBulkResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


