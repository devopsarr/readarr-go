/*
Readarr

Readarr API docs

API version: v0.3.18.2411
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// checks if the BookFileListResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookFileListResource{}

// BookFileListResource struct for BookFileListResource
type BookFileListResource struct {
	BookFileIds []int32 `json:"bookFileIds,omitempty"`
	Quality *QualityModel `json:"quality,omitempty"`
}

// NewBookFileListResource instantiates a new BookFileListResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookFileListResource() *BookFileListResource {
	this := BookFileListResource{}
	return &this
}

// NewBookFileListResourceWithDefaults instantiates a new BookFileListResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookFileListResourceWithDefaults() *BookFileListResource {
	this := BookFileListResource{}
	return &this
}

// GetBookFileIds returns the BookFileIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookFileListResource) GetBookFileIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.BookFileIds
}

// GetBookFileIdsOk returns a tuple with the BookFileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookFileListResource) GetBookFileIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.BookFileIds) {
		return nil, false
	}
	return o.BookFileIds, true
}

// HasBookFileIds returns a boolean if a field has been set.
func (o *BookFileListResource) HasBookFileIds() bool {
	if o != nil && IsNil(o.BookFileIds) {
		return true
	}

	return false
}

// SetBookFileIds gets a reference to the given []int32 and assigns it to the BookFileIds field.
func (o *BookFileListResource) SetBookFileIds(v []int32) {
	o.BookFileIds = v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *BookFileListResource) GetQuality() QualityModel {
	if o == nil || IsNil(o.Quality) {
		var ret QualityModel
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookFileListResource) GetQualityOk() (*QualityModel, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *BookFileListResource) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given QualityModel and assigns it to the Quality field.
func (o *BookFileListResource) SetQuality(v QualityModel) {
	o.Quality = &v
}

func (o BookFileListResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookFileListResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BookFileIds != nil {
		toSerialize["bookFileIds"] = o.BookFileIds
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	return toSerialize, nil
}

type NullableBookFileListResource struct {
	value *BookFileListResource
	isSet bool
}

func (v NullableBookFileListResource) Get() *BookFileListResource {
	return v.value
}

func (v *NullableBookFileListResource) Set(val *BookFileListResource) {
	v.value = val
	v.isSet = true
}

func (v NullableBookFileListResource) IsSet() bool {
	return v.isSet
}

func (v *NullableBookFileListResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookFileListResource(val *BookFileListResource) *NullableBookFileListResource {
	return &NullableBookFileListResource{value: val, isSet: true}
}

func (v NullableBookFileListResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookFileListResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


