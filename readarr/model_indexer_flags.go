/*
Readarr

Readarr API docs

API version: v0.4.10.2734
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
	"fmt"
)

// IndexerFlags the model 'IndexerFlags'
type IndexerFlags string

// List of IndexerFlags
const (
	INDEXERFLAGS_FREELEECH IndexerFlags = "freeleech"
	INDEXERFLAGS_HALFLEECH IndexerFlags = "halfleech"
	INDEXERFLAGS_DOUBLE_UPLOAD IndexerFlags = "doubleUpload"
	INDEXERFLAGS_INTERNAL IndexerFlags = "internal"
	INDEXERFLAGS_SCENE IndexerFlags = "scene"
	INDEXERFLAGS_FREELEECH75 IndexerFlags = "freeleech75"
	INDEXERFLAGS_FREELEECH25 IndexerFlags = "freeleech25"
)

// All allowed values of IndexerFlags enum
var AllowedIndexerFlagsEnumValues = []IndexerFlags{
	"freeleech",
	"halfleech",
	"doubleUpload",
	"internal",
	"scene",
	"freeleech75",
	"freeleech25",
}

func (v *IndexerFlags) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndexerFlags(value)
	for _, existing := range AllowedIndexerFlagsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndexerFlags", value)
}

// NewIndexerFlagsFromValue returns a pointer to a valid IndexerFlags
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndexerFlagsFromValue(v string) (*IndexerFlags, error) {
	ev := IndexerFlags(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndexerFlags: valid values are %v", v, AllowedIndexerFlagsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndexerFlags) IsValid() bool {
	for _, existing := range AllowedIndexerFlagsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndexerFlags value
func (v IndexerFlags) Ptr() *IndexerFlags {
	return &v
}

type NullableIndexerFlags struct {
	value *IndexerFlags
	isSet bool
}

func (v NullableIndexerFlags) Get() *IndexerFlags {
	return v.value
}

func (v *NullableIndexerFlags) Set(val *IndexerFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexerFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexerFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexerFlags(val *IndexerFlags) *NullableIndexerFlags {
	return &NullableIndexerFlags{value: val, isSet: true}
}

func (v NullableIndexerFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexerFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

