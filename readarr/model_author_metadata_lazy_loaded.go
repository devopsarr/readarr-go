/*
Readarr

Readarr API docs

API version: v0.4.10.2734
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// checks if the AuthorMetadataLazyLoaded type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorMetadataLazyLoaded{}

// AuthorMetadataLazyLoaded struct for AuthorMetadataLazyLoaded
type AuthorMetadataLazyLoaded struct {
	Value *AuthorMetadata `json:"value,omitempty"`
	IsLoaded *bool `json:"isLoaded,omitempty"`
}

// NewAuthorMetadataLazyLoaded instantiates a new AuthorMetadataLazyLoaded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorMetadataLazyLoaded() *AuthorMetadataLazyLoaded {
	this := AuthorMetadataLazyLoaded{}
	return &this
}

// NewAuthorMetadataLazyLoadedWithDefaults instantiates a new AuthorMetadataLazyLoaded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorMetadataLazyLoadedWithDefaults() *AuthorMetadataLazyLoaded {
	this := AuthorMetadataLazyLoaded{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AuthorMetadataLazyLoaded) GetValue() AuthorMetadata {
	if o == nil || IsNil(o.Value) {
		var ret AuthorMetadata
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorMetadataLazyLoaded) GetValueOk() (*AuthorMetadata, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AuthorMetadataLazyLoaded) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given AuthorMetadata and assigns it to the Value field.
func (o *AuthorMetadataLazyLoaded) SetValue(v AuthorMetadata) {
	o.Value = &v
}

// GetIsLoaded returns the IsLoaded field value if set, zero value otherwise.
func (o *AuthorMetadataLazyLoaded) GetIsLoaded() bool {
	if o == nil || IsNil(o.IsLoaded) {
		var ret bool
		return ret
	}
	return *o.IsLoaded
}

// GetIsLoadedOk returns a tuple with the IsLoaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorMetadataLazyLoaded) GetIsLoadedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLoaded) {
		return nil, false
	}
	return o.IsLoaded, true
}

// HasIsLoaded returns a boolean if a field has been set.
func (o *AuthorMetadataLazyLoaded) HasIsLoaded() bool {
	if o != nil && !IsNil(o.IsLoaded) {
		return true
	}

	return false
}

// SetIsLoaded gets a reference to the given bool and assigns it to the IsLoaded field.
func (o *AuthorMetadataLazyLoaded) SetIsLoaded(v bool) {
	o.IsLoaded = &v
}

func (o AuthorMetadataLazyLoaded) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorMetadataLazyLoaded) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.IsLoaded) {
		toSerialize["isLoaded"] = o.IsLoaded
	}
	return toSerialize, nil
}

type NullableAuthorMetadataLazyLoaded struct {
	value *AuthorMetadataLazyLoaded
	isSet bool
}

func (v NullableAuthorMetadataLazyLoaded) Get() *AuthorMetadataLazyLoaded {
	return v.value
}

func (v *NullableAuthorMetadataLazyLoaded) Set(val *AuthorMetadataLazyLoaded) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorMetadataLazyLoaded) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorMetadataLazyLoaded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorMetadataLazyLoaded(val *AuthorMetadataLazyLoaded) *NullableAuthorMetadataLazyLoaded {
	return &NullableAuthorMetadataLazyLoaded{value: val, isSet: true}
}

func (v NullableAuthorMetadataLazyLoaded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorMetadataLazyLoaded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


