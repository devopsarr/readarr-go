/*
Readarr

Readarr API docs

API version: v0.3.18.2411
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
	"fmt"
)

// WriteAudioTagsType the model 'WriteAudioTagsType'
type WriteAudioTagsType string

// List of WriteAudioTagsType
const (
	WRITEAUDIOTAGSTYPE_NO WriteAudioTagsType = "no"
	WRITEAUDIOTAGSTYPE_NEW_FILES WriteAudioTagsType = "newFiles"
	WRITEAUDIOTAGSTYPE_ALL_FILES WriteAudioTagsType = "allFiles"
	WRITEAUDIOTAGSTYPE_SYNC WriteAudioTagsType = "sync"
)

// All allowed values of WriteAudioTagsType enum
var AllowedWriteAudioTagsTypeEnumValues = []WriteAudioTagsType{
	"no",
	"newFiles",
	"allFiles",
	"sync",
}

func (v *WriteAudioTagsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WriteAudioTagsType(value)
	for _, existing := range AllowedWriteAudioTagsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WriteAudioTagsType", value)
}

// NewWriteAudioTagsTypeFromValue returns a pointer to a valid WriteAudioTagsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWriteAudioTagsTypeFromValue(v string) (*WriteAudioTagsType, error) {
	ev := WriteAudioTagsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WriteAudioTagsType: valid values are %v", v, AllowedWriteAudioTagsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WriteAudioTagsType) IsValid() bool {
	for _, existing := range AllowedWriteAudioTagsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WriteAudioTagsType value
func (v WriteAudioTagsType) Ptr() *WriteAudioTagsType {
	return &v
}

type NullableWriteAudioTagsType struct {
	value *WriteAudioTagsType
	isSet bool
}

func (v NullableWriteAudioTagsType) Get() *WriteAudioTagsType {
	return v.value
}

func (v *NullableWriteAudioTagsType) Set(val *WriteAudioTagsType) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteAudioTagsType) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteAudioTagsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteAudioTagsType(val *WriteAudioTagsType) *NullableWriteAudioTagsType {
	return &NullableWriteAudioTagsType{value: val, isSet: true}
}

func (v NullableWriteAudioTagsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteAudioTagsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

