/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
	"fmt"
)

// AllowFingerprinting the model 'AllowFingerprinting'
type AllowFingerprinting string

// List of AllowFingerprinting
const (
	ALLOWFINGERPRINTING_NEVER AllowFingerprinting = "never"
	ALLOWFINGERPRINTING_NEW_FILES AllowFingerprinting = "newFiles"
	ALLOWFINGERPRINTING_ALL_FILES AllowFingerprinting = "allFiles"
)

// All allowed values of AllowFingerprinting enum
var AllowedAllowFingerprintingEnumValues = []AllowFingerprinting{
	"never",
	"newFiles",
	"allFiles",
}

func (v *AllowFingerprinting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AllowFingerprinting(value)
	for _, existing := range AllowedAllowFingerprintingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AllowFingerprinting", value)
}

// NewAllowFingerprintingFromValue returns a pointer to a valid AllowFingerprinting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllowFingerprintingFromValue(v string) (*AllowFingerprinting, error) {
	ev := AllowFingerprinting(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AllowFingerprinting: valid values are %v", v, AllowedAllowFingerprintingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllowFingerprinting) IsValid() bool {
	for _, existing := range AllowedAllowFingerprintingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AllowFingerprinting value
func (v AllowFingerprinting) Ptr() *AllowFingerprinting {
	return &v
}

type NullableAllowFingerprinting struct {
	value *AllowFingerprinting
	isSet bool
}

func (v NullableAllowFingerprinting) Get() *AllowFingerprinting {
	return v.value
}

func (v *NullableAllowFingerprinting) Set(val *AllowFingerprinting) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowFingerprinting) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowFingerprinting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowFingerprinting(val *AllowFingerprinting) *NullableAllowFingerprinting {
	return &NullableAllowFingerprinting{value: val, isSet: true}
}

func (v NullableAllowFingerprinting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowFingerprinting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

