/*
Readarr

Readarr API docs

API version: v0.3.18.2411
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"encoding/json"
)

// ParsedTrackInfo struct for ParsedTrackInfo
type ParsedTrackInfo struct {
	Title NullableString `json:"title,omitempty"`
	CleanTitle NullableString `json:"cleanTitle,omitempty"`
	Authors []*string `json:"authors,omitempty"`
	AuthorTitle NullableString `json:"authorTitle,omitempty"`
	BookTitle NullableString `json:"bookTitle,omitempty"`
	SeriesTitle NullableString `json:"seriesTitle,omitempty"`
	SeriesIndex NullableString `json:"seriesIndex,omitempty"`
	Isbn NullableString `json:"isbn,omitempty"`
	Asin NullableString `json:"asin,omitempty"`
	GoodreadsId NullableString `json:"goodreadsId,omitempty"`
	AuthorMBId NullableString `json:"authorMBId,omitempty"`
	BookMBId NullableString `json:"bookMBId,omitempty"`
	ReleaseMBId NullableString `json:"releaseMBId,omitempty"`
	RecordingMBId NullableString `json:"recordingMBId,omitempty"`
	TrackMBId NullableString `json:"trackMBId,omitempty"`
	DiscNumber *int32 `json:"discNumber,omitempty"`
	DiscCount *int32 `json:"discCount,omitempty"`
	Country *IsoCountry `json:"country,omitempty"`
	Year *int32 `json:"year,omitempty"`
	Publisher NullableString `json:"publisher,omitempty"`
	Label NullableString `json:"label,omitempty"`
	Source NullableString `json:"source,omitempty"`
	CatalogNumber NullableString `json:"catalogNumber,omitempty"`
	Disambiguation NullableString `json:"disambiguation,omitempty"`
	Duration *string `json:"duration,omitempty"`
	Quality *QualityModel `json:"quality,omitempty"`
	MediaInfo *MediaInfoModel `json:"mediaInfo,omitempty"`
	TrackNumbers []*int32 `json:"trackNumbers,omitempty"`
	Language NullableString `json:"language,omitempty"`
	ReleaseGroup NullableString `json:"releaseGroup,omitempty"`
	ReleaseHash NullableString `json:"releaseHash,omitempty"`
}

// NewParsedTrackInfo instantiates a new ParsedTrackInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsedTrackInfo() *ParsedTrackInfo {
	this := ParsedTrackInfo{}
	return &this
}

// NewParsedTrackInfoWithDefaults instantiates a new ParsedTrackInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsedTrackInfoWithDefaults() *ParsedTrackInfo {
	this := ParsedTrackInfo{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ParsedTrackInfo) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ParsedTrackInfo) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ParsedTrackInfo) UnsetTitle() {
	o.Title.Unset()
}

// GetCleanTitle returns the CleanTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetCleanTitle() string {
	if o == nil || isNil(o.CleanTitle.Get()) {
		var ret string
		return ret
	}
	return *o.CleanTitle.Get()
}

// GetCleanTitleOk returns a tuple with the CleanTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetCleanTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CleanTitle.Get(), o.CleanTitle.IsSet()
}

// HasCleanTitle returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasCleanTitle() bool {
	if o != nil && o.CleanTitle.IsSet() {
		return true
	}

	return false
}

// SetCleanTitle gets a reference to the given NullableString and assigns it to the CleanTitle field.
func (o *ParsedTrackInfo) SetCleanTitle(v string) {
	o.CleanTitle.Set(&v)
}
// SetCleanTitleNil sets the value for CleanTitle to be an explicit nil
func (o *ParsedTrackInfo) SetCleanTitleNil() {
	o.CleanTitle.Set(nil)
}

// UnsetCleanTitle ensures that no value is present for CleanTitle, not even an explicit nil
func (o *ParsedTrackInfo) UnsetCleanTitle() {
	o.CleanTitle.Unset()
}

// GetAuthors returns the Authors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetAuthors() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.Authors
}

// GetAuthorsOk returns a tuple with the Authors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetAuthorsOk() ([]*string, bool) {
	if o == nil || isNil(o.Authors) {
    return nil, false
	}
	return o.Authors, true
}

// HasAuthors returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasAuthors() bool {
	if o != nil && isNil(o.Authors) {
		return true
	}

	return false
}

// SetAuthors gets a reference to the given []string and assigns it to the Authors field.
func (o *ParsedTrackInfo) SetAuthors(v []*string) {
	o.Authors = v
}

// GetAuthorTitle returns the AuthorTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetAuthorTitle() string {
	if o == nil || isNil(o.AuthorTitle.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorTitle.Get()
}

// GetAuthorTitleOk returns a tuple with the AuthorTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetAuthorTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AuthorTitle.Get(), o.AuthorTitle.IsSet()
}

// HasAuthorTitle returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasAuthorTitle() bool {
	if o != nil && o.AuthorTitle.IsSet() {
		return true
	}

	return false
}

// SetAuthorTitle gets a reference to the given NullableString and assigns it to the AuthorTitle field.
func (o *ParsedTrackInfo) SetAuthorTitle(v string) {
	o.AuthorTitle.Set(&v)
}
// SetAuthorTitleNil sets the value for AuthorTitle to be an explicit nil
func (o *ParsedTrackInfo) SetAuthorTitleNil() {
	o.AuthorTitle.Set(nil)
}

// UnsetAuthorTitle ensures that no value is present for AuthorTitle, not even an explicit nil
func (o *ParsedTrackInfo) UnsetAuthorTitle() {
	o.AuthorTitle.Unset()
}

// GetBookTitle returns the BookTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetBookTitle() string {
	if o == nil || isNil(o.BookTitle.Get()) {
		var ret string
		return ret
	}
	return *o.BookTitle.Get()
}

// GetBookTitleOk returns a tuple with the BookTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetBookTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.BookTitle.Get(), o.BookTitle.IsSet()
}

// HasBookTitle returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasBookTitle() bool {
	if o != nil && o.BookTitle.IsSet() {
		return true
	}

	return false
}

// SetBookTitle gets a reference to the given NullableString and assigns it to the BookTitle field.
func (o *ParsedTrackInfo) SetBookTitle(v string) {
	o.BookTitle.Set(&v)
}
// SetBookTitleNil sets the value for BookTitle to be an explicit nil
func (o *ParsedTrackInfo) SetBookTitleNil() {
	o.BookTitle.Set(nil)
}

// UnsetBookTitle ensures that no value is present for BookTitle, not even an explicit nil
func (o *ParsedTrackInfo) UnsetBookTitle() {
	o.BookTitle.Unset()
}

// GetSeriesTitle returns the SeriesTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetSeriesTitle() string {
	if o == nil || isNil(o.SeriesTitle.Get()) {
		var ret string
		return ret
	}
	return *o.SeriesTitle.Get()
}

// GetSeriesTitleOk returns a tuple with the SeriesTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetSeriesTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SeriesTitle.Get(), o.SeriesTitle.IsSet()
}

// HasSeriesTitle returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasSeriesTitle() bool {
	if o != nil && o.SeriesTitle.IsSet() {
		return true
	}

	return false
}

// SetSeriesTitle gets a reference to the given NullableString and assigns it to the SeriesTitle field.
func (o *ParsedTrackInfo) SetSeriesTitle(v string) {
	o.SeriesTitle.Set(&v)
}
// SetSeriesTitleNil sets the value for SeriesTitle to be an explicit nil
func (o *ParsedTrackInfo) SetSeriesTitleNil() {
	o.SeriesTitle.Set(nil)
}

// UnsetSeriesTitle ensures that no value is present for SeriesTitle, not even an explicit nil
func (o *ParsedTrackInfo) UnsetSeriesTitle() {
	o.SeriesTitle.Unset()
}

// GetSeriesIndex returns the SeriesIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetSeriesIndex() string {
	if o == nil || isNil(o.SeriesIndex.Get()) {
		var ret string
		return ret
	}
	return *o.SeriesIndex.Get()
}

// GetSeriesIndexOk returns a tuple with the SeriesIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetSeriesIndexOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SeriesIndex.Get(), o.SeriesIndex.IsSet()
}

// HasSeriesIndex returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasSeriesIndex() bool {
	if o != nil && o.SeriesIndex.IsSet() {
		return true
	}

	return false
}

// SetSeriesIndex gets a reference to the given NullableString and assigns it to the SeriesIndex field.
func (o *ParsedTrackInfo) SetSeriesIndex(v string) {
	o.SeriesIndex.Set(&v)
}
// SetSeriesIndexNil sets the value for SeriesIndex to be an explicit nil
func (o *ParsedTrackInfo) SetSeriesIndexNil() {
	o.SeriesIndex.Set(nil)
}

// UnsetSeriesIndex ensures that no value is present for SeriesIndex, not even an explicit nil
func (o *ParsedTrackInfo) UnsetSeriesIndex() {
	o.SeriesIndex.Unset()
}

// GetIsbn returns the Isbn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetIsbn() string {
	if o == nil || isNil(o.Isbn.Get()) {
		var ret string
		return ret
	}
	return *o.Isbn.Get()
}

// GetIsbnOk returns a tuple with the Isbn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetIsbnOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Isbn.Get(), o.Isbn.IsSet()
}

// HasIsbn returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasIsbn() bool {
	if o != nil && o.Isbn.IsSet() {
		return true
	}

	return false
}

// SetIsbn gets a reference to the given NullableString and assigns it to the Isbn field.
func (o *ParsedTrackInfo) SetIsbn(v string) {
	o.Isbn.Set(&v)
}
// SetIsbnNil sets the value for Isbn to be an explicit nil
func (o *ParsedTrackInfo) SetIsbnNil() {
	o.Isbn.Set(nil)
}

// UnsetIsbn ensures that no value is present for Isbn, not even an explicit nil
func (o *ParsedTrackInfo) UnsetIsbn() {
	o.Isbn.Unset()
}

// GetAsin returns the Asin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetAsin() string {
	if o == nil || isNil(o.Asin.Get()) {
		var ret string
		return ret
	}
	return *o.Asin.Get()
}

// GetAsinOk returns a tuple with the Asin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetAsinOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Asin.Get(), o.Asin.IsSet()
}

// HasAsin returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasAsin() bool {
	if o != nil && o.Asin.IsSet() {
		return true
	}

	return false
}

// SetAsin gets a reference to the given NullableString and assigns it to the Asin field.
func (o *ParsedTrackInfo) SetAsin(v string) {
	o.Asin.Set(&v)
}
// SetAsinNil sets the value for Asin to be an explicit nil
func (o *ParsedTrackInfo) SetAsinNil() {
	o.Asin.Set(nil)
}

// UnsetAsin ensures that no value is present for Asin, not even an explicit nil
func (o *ParsedTrackInfo) UnsetAsin() {
	o.Asin.Unset()
}

// GetGoodreadsId returns the GoodreadsId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetGoodreadsId() string {
	if o == nil || isNil(o.GoodreadsId.Get()) {
		var ret string
		return ret
	}
	return *o.GoodreadsId.Get()
}

// GetGoodreadsIdOk returns a tuple with the GoodreadsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetGoodreadsIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.GoodreadsId.Get(), o.GoodreadsId.IsSet()
}

// HasGoodreadsId returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasGoodreadsId() bool {
	if o != nil && o.GoodreadsId.IsSet() {
		return true
	}

	return false
}

// SetGoodreadsId gets a reference to the given NullableString and assigns it to the GoodreadsId field.
func (o *ParsedTrackInfo) SetGoodreadsId(v string) {
	o.GoodreadsId.Set(&v)
}
// SetGoodreadsIdNil sets the value for GoodreadsId to be an explicit nil
func (o *ParsedTrackInfo) SetGoodreadsIdNil() {
	o.GoodreadsId.Set(nil)
}

// UnsetGoodreadsId ensures that no value is present for GoodreadsId, not even an explicit nil
func (o *ParsedTrackInfo) UnsetGoodreadsId() {
	o.GoodreadsId.Unset()
}

// GetAuthorMBId returns the AuthorMBId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetAuthorMBId() string {
	if o == nil || isNil(o.AuthorMBId.Get()) {
		var ret string
		return ret
	}
	return *o.AuthorMBId.Get()
}

// GetAuthorMBIdOk returns a tuple with the AuthorMBId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetAuthorMBIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AuthorMBId.Get(), o.AuthorMBId.IsSet()
}

// HasAuthorMBId returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasAuthorMBId() bool {
	if o != nil && o.AuthorMBId.IsSet() {
		return true
	}

	return false
}

// SetAuthorMBId gets a reference to the given NullableString and assigns it to the AuthorMBId field.
func (o *ParsedTrackInfo) SetAuthorMBId(v string) {
	o.AuthorMBId.Set(&v)
}
// SetAuthorMBIdNil sets the value for AuthorMBId to be an explicit nil
func (o *ParsedTrackInfo) SetAuthorMBIdNil() {
	o.AuthorMBId.Set(nil)
}

// UnsetAuthorMBId ensures that no value is present for AuthorMBId, not even an explicit nil
func (o *ParsedTrackInfo) UnsetAuthorMBId() {
	o.AuthorMBId.Unset()
}

// GetBookMBId returns the BookMBId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetBookMBId() string {
	if o == nil || isNil(o.BookMBId.Get()) {
		var ret string
		return ret
	}
	return *o.BookMBId.Get()
}

// GetBookMBIdOk returns a tuple with the BookMBId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetBookMBIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.BookMBId.Get(), o.BookMBId.IsSet()
}

// HasBookMBId returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasBookMBId() bool {
	if o != nil && o.BookMBId.IsSet() {
		return true
	}

	return false
}

// SetBookMBId gets a reference to the given NullableString and assigns it to the BookMBId field.
func (o *ParsedTrackInfo) SetBookMBId(v string) {
	o.BookMBId.Set(&v)
}
// SetBookMBIdNil sets the value for BookMBId to be an explicit nil
func (o *ParsedTrackInfo) SetBookMBIdNil() {
	o.BookMBId.Set(nil)
}

// UnsetBookMBId ensures that no value is present for BookMBId, not even an explicit nil
func (o *ParsedTrackInfo) UnsetBookMBId() {
	o.BookMBId.Unset()
}

// GetReleaseMBId returns the ReleaseMBId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetReleaseMBId() string {
	if o == nil || isNil(o.ReleaseMBId.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseMBId.Get()
}

// GetReleaseMBIdOk returns a tuple with the ReleaseMBId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetReleaseMBIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ReleaseMBId.Get(), o.ReleaseMBId.IsSet()
}

// HasReleaseMBId returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasReleaseMBId() bool {
	if o != nil && o.ReleaseMBId.IsSet() {
		return true
	}

	return false
}

// SetReleaseMBId gets a reference to the given NullableString and assigns it to the ReleaseMBId field.
func (o *ParsedTrackInfo) SetReleaseMBId(v string) {
	o.ReleaseMBId.Set(&v)
}
// SetReleaseMBIdNil sets the value for ReleaseMBId to be an explicit nil
func (o *ParsedTrackInfo) SetReleaseMBIdNil() {
	o.ReleaseMBId.Set(nil)
}

// UnsetReleaseMBId ensures that no value is present for ReleaseMBId, not even an explicit nil
func (o *ParsedTrackInfo) UnsetReleaseMBId() {
	o.ReleaseMBId.Unset()
}

// GetRecordingMBId returns the RecordingMBId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetRecordingMBId() string {
	if o == nil || isNil(o.RecordingMBId.Get()) {
		var ret string
		return ret
	}
	return *o.RecordingMBId.Get()
}

// GetRecordingMBIdOk returns a tuple with the RecordingMBId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetRecordingMBIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RecordingMBId.Get(), o.RecordingMBId.IsSet()
}

// HasRecordingMBId returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasRecordingMBId() bool {
	if o != nil && o.RecordingMBId.IsSet() {
		return true
	}

	return false
}

// SetRecordingMBId gets a reference to the given NullableString and assigns it to the RecordingMBId field.
func (o *ParsedTrackInfo) SetRecordingMBId(v string) {
	o.RecordingMBId.Set(&v)
}
// SetRecordingMBIdNil sets the value for RecordingMBId to be an explicit nil
func (o *ParsedTrackInfo) SetRecordingMBIdNil() {
	o.RecordingMBId.Set(nil)
}

// UnsetRecordingMBId ensures that no value is present for RecordingMBId, not even an explicit nil
func (o *ParsedTrackInfo) UnsetRecordingMBId() {
	o.RecordingMBId.Unset()
}

// GetTrackMBId returns the TrackMBId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetTrackMBId() string {
	if o == nil || isNil(o.TrackMBId.Get()) {
		var ret string
		return ret
	}
	return *o.TrackMBId.Get()
}

// GetTrackMBIdOk returns a tuple with the TrackMBId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetTrackMBIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TrackMBId.Get(), o.TrackMBId.IsSet()
}

// HasTrackMBId returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasTrackMBId() bool {
	if o != nil && o.TrackMBId.IsSet() {
		return true
	}

	return false
}

// SetTrackMBId gets a reference to the given NullableString and assigns it to the TrackMBId field.
func (o *ParsedTrackInfo) SetTrackMBId(v string) {
	o.TrackMBId.Set(&v)
}
// SetTrackMBIdNil sets the value for TrackMBId to be an explicit nil
func (o *ParsedTrackInfo) SetTrackMBIdNil() {
	o.TrackMBId.Set(nil)
}

// UnsetTrackMBId ensures that no value is present for TrackMBId, not even an explicit nil
func (o *ParsedTrackInfo) UnsetTrackMBId() {
	o.TrackMBId.Unset()
}

// GetDiscNumber returns the DiscNumber field value if set, zero value otherwise.
func (o *ParsedTrackInfo) GetDiscNumber() int32 {
	if o == nil || isNil(o.DiscNumber) {
		var ret int32
		return ret
	}
	return *o.DiscNumber
}

// GetDiscNumberOk returns a tuple with the DiscNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsedTrackInfo) GetDiscNumberOk() (*int32, bool) {
	if o == nil || isNil(o.DiscNumber) {
    return nil, false
	}
	return o.DiscNumber, true
}

// HasDiscNumber returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasDiscNumber() bool {
	if o != nil && !isNil(o.DiscNumber) {
		return true
	}

	return false
}

// SetDiscNumber gets a reference to the given int32 and assigns it to the DiscNumber field.
func (o *ParsedTrackInfo) SetDiscNumber(v int32) {
	o.DiscNumber = &v
}

// GetDiscCount returns the DiscCount field value if set, zero value otherwise.
func (o *ParsedTrackInfo) GetDiscCount() int32 {
	if o == nil || isNil(o.DiscCount) {
		var ret int32
		return ret
	}
	return *o.DiscCount
}

// GetDiscCountOk returns a tuple with the DiscCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsedTrackInfo) GetDiscCountOk() (*int32, bool) {
	if o == nil || isNil(o.DiscCount) {
    return nil, false
	}
	return o.DiscCount, true
}

// HasDiscCount returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasDiscCount() bool {
	if o != nil && !isNil(o.DiscCount) {
		return true
	}

	return false
}

// SetDiscCount gets a reference to the given int32 and assigns it to the DiscCount field.
func (o *ParsedTrackInfo) SetDiscCount(v int32) {
	o.DiscCount = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ParsedTrackInfo) GetCountry() IsoCountry {
	if o == nil || isNil(o.Country) {
		var ret IsoCountry
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsedTrackInfo) GetCountryOk() (*IsoCountry, bool) {
	if o == nil || isNil(o.Country) {
    return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given IsoCountry and assigns it to the Country field.
func (o *ParsedTrackInfo) SetCountry(v IsoCountry) {
	o.Country = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *ParsedTrackInfo) GetYear() int32 {
	if o == nil || isNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsedTrackInfo) GetYearOk() (*int32, bool) {
	if o == nil || isNil(o.Year) {
    return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasYear() bool {
	if o != nil && !isNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *ParsedTrackInfo) SetYear(v int32) {
	o.Year = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetPublisher() string {
	if o == nil || isNil(o.Publisher.Get()) {
		var ret string
		return ret
	}
	return *o.Publisher.Get()
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetPublisherOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Publisher.Get(), o.Publisher.IsSet()
}

// HasPublisher returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasPublisher() bool {
	if o != nil && o.Publisher.IsSet() {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given NullableString and assigns it to the Publisher field.
func (o *ParsedTrackInfo) SetPublisher(v string) {
	o.Publisher.Set(&v)
}
// SetPublisherNil sets the value for Publisher to be an explicit nil
func (o *ParsedTrackInfo) SetPublisherNil() {
	o.Publisher.Set(nil)
}

// UnsetPublisher ensures that no value is present for Publisher, not even an explicit nil
func (o *ParsedTrackInfo) UnsetPublisher() {
	o.Publisher.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetLabel() string {
	if o == nil || isNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetLabelOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *ParsedTrackInfo) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *ParsedTrackInfo) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *ParsedTrackInfo) UnsetLabel() {
	o.Label.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetSource() string {
	if o == nil || isNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetSourceOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *ParsedTrackInfo) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *ParsedTrackInfo) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *ParsedTrackInfo) UnsetSource() {
	o.Source.Unset()
}

// GetCatalogNumber returns the CatalogNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetCatalogNumber() string {
	if o == nil || isNil(o.CatalogNumber.Get()) {
		var ret string
		return ret
	}
	return *o.CatalogNumber.Get()
}

// GetCatalogNumberOk returns a tuple with the CatalogNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetCatalogNumberOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CatalogNumber.Get(), o.CatalogNumber.IsSet()
}

// HasCatalogNumber returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasCatalogNumber() bool {
	if o != nil && o.CatalogNumber.IsSet() {
		return true
	}

	return false
}

// SetCatalogNumber gets a reference to the given NullableString and assigns it to the CatalogNumber field.
func (o *ParsedTrackInfo) SetCatalogNumber(v string) {
	o.CatalogNumber.Set(&v)
}
// SetCatalogNumberNil sets the value for CatalogNumber to be an explicit nil
func (o *ParsedTrackInfo) SetCatalogNumberNil() {
	o.CatalogNumber.Set(nil)
}

// UnsetCatalogNumber ensures that no value is present for CatalogNumber, not even an explicit nil
func (o *ParsedTrackInfo) UnsetCatalogNumber() {
	o.CatalogNumber.Unset()
}

// GetDisambiguation returns the Disambiguation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetDisambiguation() string {
	if o == nil || isNil(o.Disambiguation.Get()) {
		var ret string
		return ret
	}
	return *o.Disambiguation.Get()
}

// GetDisambiguationOk returns a tuple with the Disambiguation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetDisambiguationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Disambiguation.Get(), o.Disambiguation.IsSet()
}

// HasDisambiguation returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasDisambiguation() bool {
	if o != nil && o.Disambiguation.IsSet() {
		return true
	}

	return false
}

// SetDisambiguation gets a reference to the given NullableString and assigns it to the Disambiguation field.
func (o *ParsedTrackInfo) SetDisambiguation(v string) {
	o.Disambiguation.Set(&v)
}
// SetDisambiguationNil sets the value for Disambiguation to be an explicit nil
func (o *ParsedTrackInfo) SetDisambiguationNil() {
	o.Disambiguation.Set(nil)
}

// UnsetDisambiguation ensures that no value is present for Disambiguation, not even an explicit nil
func (o *ParsedTrackInfo) UnsetDisambiguation() {
	o.Disambiguation.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ParsedTrackInfo) GetDuration() string {
	if o == nil || isNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsedTrackInfo) GetDurationOk() (*string, bool) {
	if o == nil || isNil(o.Duration) {
    return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *ParsedTrackInfo) SetDuration(v string) {
	o.Duration = &v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *ParsedTrackInfo) GetQuality() QualityModel {
	if o == nil || isNil(o.Quality) {
		var ret QualityModel
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsedTrackInfo) GetQualityOk() (*QualityModel, bool) {
	if o == nil || isNil(o.Quality) {
    return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasQuality() bool {
	if o != nil && !isNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given QualityModel and assigns it to the Quality field.
func (o *ParsedTrackInfo) SetQuality(v QualityModel) {
	o.Quality = &v
}

// GetMediaInfo returns the MediaInfo field value if set, zero value otherwise.
func (o *ParsedTrackInfo) GetMediaInfo() MediaInfoModel {
	if o == nil || isNil(o.MediaInfo) {
		var ret MediaInfoModel
		return ret
	}
	return *o.MediaInfo
}

// GetMediaInfoOk returns a tuple with the MediaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsedTrackInfo) GetMediaInfoOk() (*MediaInfoModel, bool) {
	if o == nil || isNil(o.MediaInfo) {
    return nil, false
	}
	return o.MediaInfo, true
}

// HasMediaInfo returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasMediaInfo() bool {
	if o != nil && !isNil(o.MediaInfo) {
		return true
	}

	return false
}

// SetMediaInfo gets a reference to the given MediaInfoModel and assigns it to the MediaInfo field.
func (o *ParsedTrackInfo) SetMediaInfo(v MediaInfoModel) {
	o.MediaInfo = &v
}

// GetTrackNumbers returns the TrackNumbers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetTrackNumbers() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.TrackNumbers
}

// GetTrackNumbersOk returns a tuple with the TrackNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetTrackNumbersOk() ([]*int32, bool) {
	if o == nil || isNil(o.TrackNumbers) {
    return nil, false
	}
	return o.TrackNumbers, true
}

// HasTrackNumbers returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasTrackNumbers() bool {
	if o != nil && isNil(o.TrackNumbers) {
		return true
	}

	return false
}

// SetTrackNumbers gets a reference to the given []int32 and assigns it to the TrackNumbers field.
func (o *ParsedTrackInfo) SetTrackNumbers(v []*int32) {
	o.TrackNumbers = v
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetLanguage() string {
	if o == nil || isNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetLanguageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *ParsedTrackInfo) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *ParsedTrackInfo) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *ParsedTrackInfo) UnsetLanguage() {
	o.Language.Unset()
}

// GetReleaseGroup returns the ReleaseGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetReleaseGroup() string {
	if o == nil || isNil(o.ReleaseGroup.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseGroup.Get()
}

// GetReleaseGroupOk returns a tuple with the ReleaseGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetReleaseGroupOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ReleaseGroup.Get(), o.ReleaseGroup.IsSet()
}

// HasReleaseGroup returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasReleaseGroup() bool {
	if o != nil && o.ReleaseGroup.IsSet() {
		return true
	}

	return false
}

// SetReleaseGroup gets a reference to the given NullableString and assigns it to the ReleaseGroup field.
func (o *ParsedTrackInfo) SetReleaseGroup(v string) {
	o.ReleaseGroup.Set(&v)
}
// SetReleaseGroupNil sets the value for ReleaseGroup to be an explicit nil
func (o *ParsedTrackInfo) SetReleaseGroupNil() {
	o.ReleaseGroup.Set(nil)
}

// UnsetReleaseGroup ensures that no value is present for ReleaseGroup, not even an explicit nil
func (o *ParsedTrackInfo) UnsetReleaseGroup() {
	o.ReleaseGroup.Unset()
}

// GetReleaseHash returns the ReleaseHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParsedTrackInfo) GetReleaseHash() string {
	if o == nil || isNil(o.ReleaseHash.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseHash.Get()
}

// GetReleaseHashOk returns a tuple with the ReleaseHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParsedTrackInfo) GetReleaseHashOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ReleaseHash.Get(), o.ReleaseHash.IsSet()
}

// HasReleaseHash returns a boolean if a field has been set.
func (o *ParsedTrackInfo) HasReleaseHash() bool {
	if o != nil && o.ReleaseHash.IsSet() {
		return true
	}

	return false
}

// SetReleaseHash gets a reference to the given NullableString and assigns it to the ReleaseHash field.
func (o *ParsedTrackInfo) SetReleaseHash(v string) {
	o.ReleaseHash.Set(&v)
}
// SetReleaseHashNil sets the value for ReleaseHash to be an explicit nil
func (o *ParsedTrackInfo) SetReleaseHashNil() {
	o.ReleaseHash.Set(nil)
}

// UnsetReleaseHash ensures that no value is present for ReleaseHash, not even an explicit nil
func (o *ParsedTrackInfo) UnsetReleaseHash() {
	o.ReleaseHash.Unset()
}

func (o ParsedTrackInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.CleanTitle.IsSet() {
		toSerialize["cleanTitle"] = o.CleanTitle.Get()
	}
	if o.Authors != nil {
		toSerialize["authors"] = o.Authors
	}
	if o.AuthorTitle.IsSet() {
		toSerialize["authorTitle"] = o.AuthorTitle.Get()
	}
	if o.BookTitle.IsSet() {
		toSerialize["bookTitle"] = o.BookTitle.Get()
	}
	if o.SeriesTitle.IsSet() {
		toSerialize["seriesTitle"] = o.SeriesTitle.Get()
	}
	if o.SeriesIndex.IsSet() {
		toSerialize["seriesIndex"] = o.SeriesIndex.Get()
	}
	if o.Isbn.IsSet() {
		toSerialize["isbn"] = o.Isbn.Get()
	}
	if o.Asin.IsSet() {
		toSerialize["asin"] = o.Asin.Get()
	}
	if o.GoodreadsId.IsSet() {
		toSerialize["goodreadsId"] = o.GoodreadsId.Get()
	}
	if o.AuthorMBId.IsSet() {
		toSerialize["authorMBId"] = o.AuthorMBId.Get()
	}
	if o.BookMBId.IsSet() {
		toSerialize["bookMBId"] = o.BookMBId.Get()
	}
	if o.ReleaseMBId.IsSet() {
		toSerialize["releaseMBId"] = o.ReleaseMBId.Get()
	}
	if o.RecordingMBId.IsSet() {
		toSerialize["recordingMBId"] = o.RecordingMBId.Get()
	}
	if o.TrackMBId.IsSet() {
		toSerialize["trackMBId"] = o.TrackMBId.Get()
	}
	if !isNil(o.DiscNumber) {
		toSerialize["discNumber"] = o.DiscNumber
	}
	if !isNil(o.DiscCount) {
		toSerialize["discCount"] = o.DiscCount
	}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !isNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if o.Publisher.IsSet() {
		toSerialize["publisher"] = o.Publisher.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if o.CatalogNumber.IsSet() {
		toSerialize["catalogNumber"] = o.CatalogNumber.Get()
	}
	if o.Disambiguation.IsSet() {
		toSerialize["disambiguation"] = o.Disambiguation.Get()
	}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !isNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if !isNil(o.MediaInfo) {
		toSerialize["mediaInfo"] = o.MediaInfo
	}
	if o.TrackNumbers != nil {
		toSerialize["trackNumbers"] = o.TrackNumbers
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if o.ReleaseGroup.IsSet() {
		toSerialize["releaseGroup"] = o.ReleaseGroup.Get()
	}
	if o.ReleaseHash.IsSet() {
		toSerialize["releaseHash"] = o.ReleaseHash.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableParsedTrackInfo struct {
	value *ParsedTrackInfo
	isSet bool
}

func (v NullableParsedTrackInfo) Get() *ParsedTrackInfo {
	return v.value
}

func (v *NullableParsedTrackInfo) Set(val *ParsedTrackInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableParsedTrackInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableParsedTrackInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsedTrackInfo(val *ParsedTrackInfo) *NullableParsedTrackInfo {
	return &NullableParsedTrackInfo{value: val, isSet: true}
}

func (v NullableParsedTrackInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsedTrackInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


