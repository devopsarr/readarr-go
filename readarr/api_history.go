/*
Readarr

Readarr API docs

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package readarr

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


// HistoryApiService HistoryApi service
type HistoryApiService service
type ApiCreateApiV1HistoryFailedRequest struct {
	ctx context.Context
	ApiService *HistoryApiService
	body *int32
}

func (r ApiCreateApiV1HistoryFailedRequest) Body(body int32) ApiCreateApiV1HistoryFailedRequest {
	r.body = &body
	return r
}

func (r ApiCreateApiV1HistoryFailedRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateApiV1HistoryFailedExecute(r)
}

/*
CreateApiV1HistoryFailed Method for CreateApiV1HistoryFailed

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateApiV1HistoryFailedRequest
*/
func (a *HistoryApiService) CreateApiV1HistoryFailed(ctx context.Context) ApiCreateApiV1HistoryFailedRequest {
	return ApiCreateApiV1HistoryFailedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *HistoryApiService) CreateApiV1HistoryFailedExecute(r ApiCreateApiV1HistoryFailedRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoryApiService.CreateApiV1HistoryFailed")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/history/failed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
type ApiGetApiV1HistoryRequest struct {
	ctx context.Context
	ApiService *HistoryApiService
	includeAuthor *bool
	includeBook *bool
}

func (r ApiGetApiV1HistoryRequest) IncludeAuthor(includeAuthor bool) ApiGetApiV1HistoryRequest {
	r.includeAuthor = &includeAuthor
	return r
}

func (r ApiGetApiV1HistoryRequest) IncludeBook(includeBook bool) ApiGetApiV1HistoryRequest {
	r.includeBook = &includeBook
	return r
}

func (r ApiGetApiV1HistoryRequest) Execute() (*HistoryResourcePagingResource, *http.Response, error) {
	return r.ApiService.GetApiV1HistoryExecute(r)
}

/*
GetApiV1History Method for GetApiV1History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApiV1HistoryRequest
*/
func (a *HistoryApiService) GetApiV1History(ctx context.Context) ApiGetApiV1HistoryRequest {
	return ApiGetApiV1HistoryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistoryResourcePagingResource
func (a *HistoryApiService) GetApiV1HistoryExecute(r ApiGetApiV1HistoryRequest) (*HistoryResourcePagingResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoryResourcePagingResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoryApiService.GetApiV1History")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeAuthor != nil {
		localVarQueryParams.Add("includeAuthor", parameterToString(*r.includeAuthor, ""))
	}
	if r.includeBook != nil {
		localVarQueryParams.Add("includeBook", parameterToString(*r.includeBook, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiListApiV1HistoryAuthorRequest struct {
	ctx context.Context
	ApiService *HistoryApiService
	authorId *int32
	bookId *int32
	eventType *HistoryEventType
	includeAuthor *bool
	includeBook *bool
}

func (r ApiListApiV1HistoryAuthorRequest) AuthorId(authorId int32) ApiListApiV1HistoryAuthorRequest {
	r.authorId = &authorId
	return r
}

func (r ApiListApiV1HistoryAuthorRequest) BookId(bookId int32) ApiListApiV1HistoryAuthorRequest {
	r.bookId = &bookId
	return r
}

func (r ApiListApiV1HistoryAuthorRequest) EventType(eventType HistoryEventType) ApiListApiV1HistoryAuthorRequest {
	r.eventType = &eventType
	return r
}

func (r ApiListApiV1HistoryAuthorRequest) IncludeAuthor(includeAuthor bool) ApiListApiV1HistoryAuthorRequest {
	r.includeAuthor = &includeAuthor
	return r
}

func (r ApiListApiV1HistoryAuthorRequest) IncludeBook(includeBook bool) ApiListApiV1HistoryAuthorRequest {
	r.includeBook = &includeBook
	return r
}

func (r ApiListApiV1HistoryAuthorRequest) Execute() ([]*HistoryResource, *http.Response, error) {
	return r.ApiService.ListApiV1HistoryAuthorExecute(r)
}

/*
ListApiV1HistoryAuthor Method for ListApiV1HistoryAuthor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListApiV1HistoryAuthorRequest
*/
func (a *HistoryApiService) ListApiV1HistoryAuthor(ctx context.Context) ApiListApiV1HistoryAuthorRequest {
	return ApiListApiV1HistoryAuthorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoryResource
func (a *HistoryApiService) ListApiV1HistoryAuthorExecute(r ApiListApiV1HistoryAuthorRequest) ([]*HistoryResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []*HistoryResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoryApiService.ListApiV1HistoryAuthor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/history/author"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.authorId != nil {
		localVarQueryParams.Add("authorId", parameterToString(*r.authorId, ""))
	}
	if r.bookId != nil {
		localVarQueryParams.Add("bookId", parameterToString(*r.bookId, ""))
	}
	if r.eventType != nil {
		localVarQueryParams.Add("eventType", parameterToString(*r.eventType, ""))
	}
	if r.includeAuthor != nil {
		localVarQueryParams.Add("includeAuthor", parameterToString(*r.includeAuthor, ""))
	}
	if r.includeBook != nil {
		localVarQueryParams.Add("includeBook", parameterToString(*r.includeBook, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type ApiListApiV1HistorySinceRequest struct {
	ctx context.Context
	ApiService *HistoryApiService
	date *time.Time
	eventType *HistoryEventType
	includeAuthor *bool
	includeBook *bool
}

func (r ApiListApiV1HistorySinceRequest) Date(date time.Time) ApiListApiV1HistorySinceRequest {
	r.date = &date
	return r
}

func (r ApiListApiV1HistorySinceRequest) EventType(eventType HistoryEventType) ApiListApiV1HistorySinceRequest {
	r.eventType = &eventType
	return r
}

func (r ApiListApiV1HistorySinceRequest) IncludeAuthor(includeAuthor bool) ApiListApiV1HistorySinceRequest {
	r.includeAuthor = &includeAuthor
	return r
}

func (r ApiListApiV1HistorySinceRequest) IncludeBook(includeBook bool) ApiListApiV1HistorySinceRequest {
	r.includeBook = &includeBook
	return r
}

func (r ApiListApiV1HistorySinceRequest) Execute() ([]*HistoryResource, *http.Response, error) {
	return r.ApiService.ListApiV1HistorySinceExecute(r)
}

/*
ListApiV1HistorySince Method for ListApiV1HistorySince

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListApiV1HistorySinceRequest
*/
func (a *HistoryApiService) ListApiV1HistorySince(ctx context.Context) ApiListApiV1HistorySinceRequest {
	return ApiListApiV1HistorySinceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HistoryResource
func (a *HistoryApiService) ListApiV1HistorySinceExecute(r ApiListApiV1HistorySinceRequest) ([]*HistoryResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []*HistoryResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoryApiService.ListApiV1HistorySince")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/history/since"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.date != nil {
		localVarQueryParams.Add("date", parameterToString(*r.date, ""))
	}
	if r.eventType != nil {
		localVarQueryParams.Add("eventType", parameterToString(*r.eventType, ""))
	}
	if r.includeAuthor != nil {
		localVarQueryParams.Add("includeAuthor", parameterToString(*r.includeAuthor, ""))
	}
	if r.includeBook != nil {
		localVarQueryParams.Add("includeBook", parameterToString(*r.includeBook, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
